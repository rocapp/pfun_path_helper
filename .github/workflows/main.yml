name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    environment:
      name: Release
    permissions:
      id-token: write
      contents: write  # <-- Add this line to allow pushing tags
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          pip install --upgrade pip
          pip install uv

      - name: Install dependencies
        run: |
          uv venv && \
            uv pip install .

      - name: Run tests
        run: uvx tox

      - name: Get version
        id: get_version
        run: |
          VERSION=$(python -c "import importlib.metadata; print(importlib.metadata.version('pfun-path-helper'))")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag (remove, if exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          if git rev-parse "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.VERSION }} already exists. Deleting it."
            git tag -d "v${{ steps.get_version.outputs.VERSION }}"
            git push origin --delete "v${{ steps.get_version.outputs.VERSION }}"
            echo "Tag v${{ steps.get_version.outputs.VERSION }} deleted."
          fi
          echo "Creating new tag v${{ steps.get_version.outputs.VERSION }}"
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git tag "v${{ steps.get_version.outputs.VERSION }}"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin "v${{ steps.get_version.outputs.VERSION }}"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking if release already exists for version ${{ steps.get_version.outputs.VERSION }}."
          if gh release view "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "Release v${{ steps.get_version.outputs.VERSION }} already exists. deleting it."
            gh release delete "v${{ steps.get_version.outputs.VERSION }}" --yes
            echo "Existing Release v${{ steps.get_version.outputs.VERSION }} deleted."
          fi
          echo "Creating GitHub release for version ${{ steps.get_version.outputs.VERSION }}."
          gh release create "v${{ steps.get_version.outputs.VERSION }}" --title "Release v${{ steps.get_version.outputs.VERSION }}" --notes "Release notes for version ${{ steps.get_version.outputs.VERSION }}"
          echo "Release v${{ steps.get_version.outputs.VERSION }} created successfully."
      - name: Upload Release Assets
        run: |
          uv build
          gh release upload "v${{ steps.get_version.outputs.VERSION }}" dist/* --clobber
          echo "Assets uploaded for release v${{ steps.get_version.outputs.VERSION }}."

      - name: Deploy to PyPI
        env:
          UV_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv publish --token $UV_PYPI_TOKEN